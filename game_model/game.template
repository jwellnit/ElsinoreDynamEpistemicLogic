Types:
Players = ophelia, hamlet, laertes, polonius, bernardo, brit, unit
Observers = ophelia, unit
Beliefs = opheliaInDanger, britMeetsAtDocks, britIsASpy, iHaveBeenSummoned
Goals = null
Hearsay = imInDanger, britIsASpy, spyInElsinore, bernardoSummon
Events = poloniusLecture, castleBriefing, laertesLeaves, murder, hamletKillsPolonius, laertesMakesPlan, laertesMeetsBrit, laertesKillsHamlet, laertesConfessesBrit, bernardoInterrogatesHamlet, bernardoInterrogatesPolonius, bernardoInterrogatesBrit, britMeetsFortinbras, bernardoConfrontsBrit, laertesConfrontsBrit, bernardoBusy, bernardoNotBusy
Bool = true, false
Unit = unit
Loop = first, second, after, reset
Decisions = yes, no
Locations = upperHall, lowerHall, mainHall, groundsDocks, courtyard, library, null

Properties:
at :: Players -> Locations ()
dead :: Players -> Bool ()
believes :: Beliefs -> Players -> Bool ()
goal :: Goals -> Players -> Bool ()
knows :: Hearsay -> Bool ()
busy :: Players -> Bool ()
gone :: Players -> Bool ()
upset :: Players -> Bool ()
shattered :: Players -> Bool ()
scheduled :: Events -> Bool ()
completed ::  Events -> Bool ()
impossible :: Events -> Bool ()
loop :: Unit -> Loops ()

Actions:
go(p: Players, l: Locations) {
at(p) = l
}

tellHearsay(o: Players, p: Players, h: Hearsay) {
precondition at(o) == at(p);
precondition busy(p) != true;
precondition upset(p) != true;
precondition shattered(p) != true;
precondition dead(p) != true;
precondition gone(p) != true;
public (p) knows(h) = true
}

updateBelief(p: Players, b: Beliefs, t: Bool) {
public (p) believes(b, p) = t
}

updateGoal(p: Players, g: Goals, t: Bool) {
public (p) goal(g, p) = t
}

updateBeliefO(p: Players, b: Beliefs, o: Players, t: Bool) {
public (p, o) believes(b, p) = t
}

updateGoalO(p: Players, g: Goals, o: Players, t: Bool) {
public (p, o) goal(g, p) = t
}

updateHearsay(p: Players, h: Hearsay, t: Bool) {
public (p) knows(h) = t
}

setBusy(p: Players, b: Bool) {
public (p) busy(p) = b
}

setUpset(p: Players, b: Bool) {
public (p) upset(p) = b
}

setShattered(p: Players, b: Bool) {
public (p) shattered(p) = b
}

setDead(p: Players, b: Bool) {
public (p) dead(p) = b
}

setGone(p: Players, b: Bool) {
public (p) gone(p) = b
}

setBusyO(p: Players, b: Bool, o: Players) {
public (p, o) busy(p) = b
}

setUpsetO(p: Players, b: Bool, o: Players) {
public (p, o) upset(p) = b
}

setShatteredO(p: Players, b: Bool, o: Players) {
public (p, o) shattered(p) = b
}

setDeadO(p: Players, b: Bool, o: Players) {
public (p, o) gone(p) = b
}

setGoneO(p: Players, b: Bool, o: Players) {
public (p, o) dead(p) = b
}

cancelEvent(e: Events) {
scheduled(e) = false;
impossible(e) = true
}

schedulelaertesConfrontsBrit(e: Events) {
precondition believes(britIsASpy,laertes) == true;
scheduled(e) = true
}

schedulebernardoConfrontsBrit(e: Events) {
precondition believes(britIsASpy,bernardo) == true;
scheduled(e) = true
}

schedulebritMeetsFortinbras(e: Events) {
precondition believes(britMeetsAtDocks,ophelia) == true;
scheduled(e) = true
}

schedulebernardoInterrogatesBrit(e: Events) {
precondition believes(iHaveBeenSummoned,brit) == true;
precondition believes(opheliaInDanger,bernardo) == true;
scheduled(e) = true
}

schedulebernardoInterrogatesPolonius(e: Events) {
precondition believes(iHaveBeenSummoned,polonius) == true;
precondition believes(opheliaInDanger,bernardo) == true;
scheduled(e) = true
}

schedulebernardoInterrogatesHamlet(e: Events) {
precondition believes(iHaveBeenSummoned,hamlet) == true;
precondition believes(opheliaInDanger,bernardo) == true;
scheduled(e) = true
}

schedulelaertesConfessesBrit(e: Events) {
precondition dead(polonius) == true;
precondition dead(hamlet) == true;
precondition believes(opheliaInDanger,laertes) == true;
scheduled(e) = true
}

schedulelaertesKillsHamlet(e: Events) {
precondition dead(polonius) == true;
precondition believes(opheliaInDanger,laertes) == true;
scheduled(e) = true
}

schedulelaertesMeetsBrit(e: Events) {
precondition believes(opheliaInDanger,laertes) == true;
precondition believes(opheliaInDanger,bernardo) == true;
scheduled(e) = true
}

schedulelaertesMakesPlan(e: Events) {
precondition believes(opheliaInDanger,laertes) == true;
scheduled(e) = true
}

executelaertesConfrontsBrit(e: Events, c1: Players, c2: Players, c3: Players, l: Locations, o: Observers) {
at(c1) = l;
at(c2) = l;
at(c3) = l;
public (c2) shattered(c2) = true;
impossible(murder) = true;
completed(e) = true;
scheduled(e) = false
}

executebernardoConfrontsBrit(e: Events, c1: Players, c2: Players, l: Locations, o: Observers) {
at(c1) = l;
at(c2) = l;
public (c2) shattered(c2) = true;
impossible(murder) = true;
completed(e) = true;
scheduled(e) = false
}

executebritMeetsFortinbras(e: Events, c1: Players, l: Locations, o: Observers) {
at(c1) = l;
public(o) knows(britIsASpy) = true;
completed(e) = true;
scheduled(e) = false
}

executebernardoInterrogatesBrit(e: Events, c1: Players, c2: Players, l: Locations, o: Observers) {
at(c1) = l;
at(c2) = l;
completed(e) = true;
scheduled(e) = false
}

executebernardoInterrogatesPolonius(e: Events, c1: Players, c2: Players, l: Locations, o: Observers) {
at(c1) = l;
at(c2) = l;
completed(e) = true;
scheduled(e) = false
}

executebernardoInterrogatesHamlet(e: Events, c1: Players, c2: Players, l: Locations, o: Observers) {
at(c1) = l;
at(c2) = l;
public (o) believes(britMeetsAtDocks, o) = true;
completed(e) = true;
scheduled(e) = false
}

executelaertesConfessesBrit(e: Events, c1: Players, c2: Players, l: Locations, o: Observers) {
at(c1) = l;
at(c2) = l;
public(o) knows(britIsASpy) = true;
completed(e) = true;
scheduled(e) = false
}

executelaertesKillsHamlet(e: Events, c1: Players, c2: Players, l: Locations, o: Observers) {
at(c1) = l;
at(c2) = l;
dead(c2) = true;
completed(e) = true;
scheduled(e) = false
}

executelaertesMeetsBrit(e: Events, c1: Players, c2: Players, l: Locations, o: Observers) {
at(c1) = l;
at(c2) = l;
completed(e) = true;
scheduled(e) = false
}

executelaertesMakesPlan(e: Events, c1: Players, c2: Players, l: Locations, o: Observers) {
at(c1) = l;
at(c2) = l;
public (c2) believes(opheliaInDanger, c2) = true;
completed(e) = true;
scheduled(e) = false
}

executehamletKillsPolonius(e: Events, c1: Players, c2: Players, l: Locations, o: Observers) {
at(c1) = l;
at(c2) = l;
dead(c2) = true;
completed(e) = true;
scheduled(e) = false
}

executemurder(e: Events, c1: Players, c2: Players, l: Locations, o: Observers) {
dead(c1) = true;
public(c1) knows(imInDanger) = true;
completed(e) = true;
scheduled(e) = false
}

executelaertesLeaves(e: Events, c1: Players, c2: Players, l: Locations, o: Observers) {
at(c1) = l;
at(c2) = l;
gone(laertes) = true;
completed(e) = true;
scheduled(e) = false
}

executepoloniusLecture(e: Events, c1: Players, c2: Players, c3: Players, l: Locations, o: Observers) {
completed(e) = true;
scheduled(e) = false
}

executecastleBriefing(e: Events, c1: Players, c2: Players, l: Locations, o: Observers) {
at(c1) = l;
at(c2) = l;
public(o) knows(spyInElsinore) = true;
completed(e) = true;
scheduled(e) = false
}

executebernardoBusy(e: Events, c1: Players) {
busy(c1) = true;
completed(e) = true;
scheduled(e) = false
}

executebernardoNotBusy(e: Events, c1: Players) {
busy(c1) = false;
completed(e) = true;
scheduled(e) = false
}

Initial:
at(ophelia) = upperHall()
at(hamlet) = upperHall()
at(polonius) = upperHall()
at(brit) = lowerHall()
at(bernardo) = lowerHall()
at(laertes) = groundsDocks()
scheduled(poloniusLecture) = true()
scheduled(castleBriefing) = true()
scheduled(laertesLeaves) = true()
scheduled(hamletKillsPolonius) = true()
scheduled(murder) = true()
looks like (laertes, ophelia, polonius, hamlet, brit, bernardo): Initial

Execute:
$$
print: model

Done.
