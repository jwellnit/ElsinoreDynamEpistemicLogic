BoolTypes:
Players = Ophelia, p1, p2, p3, p4
Beliefs = b1, b2, b3, b4
Goals = g1, g2, g3, g4
Hearsay = h1, h2, h3, h4
Events = e1, e2, e3, e4
Bool = true, false
Unit = unit
Loop = first, second, after
Decisions = yes, no
Locations = l1, l2, l3, l4, m1

Properties:
at :: Players -> Locations ()
dead :: Players -> Bool ()
believes :: Beliefs -> Bool ()
goal :: Goals -> Bool ()
knows :: Hearsay -> Bool ()
observer :: Unit -> Players ()
resultsB :: Players -> Hearsay -> Beliefs ()
resultsG :: Players -> Hearsay -> Beliefs ()
busy :: Players -> Bool ()
upset :: Players -> Bool ()
shattered :: Players -> Bool ()
scheduled :: Events -> Bool ()
completed ::  Events -> Bool ()
impossible :: Events -> Bool ()

Actions:
go(p: Players, l: Locations) {
at(p) = l
}

tellHearsay(o: Players, p: Players, h: Hearsay) {
precondition at(o) == at(p);
precondition busy(p) != true;
precondition upset(p) != true;
precondition shattered(p) != true;
precondition dead(p) != true;
public (p) knows(h) = true
}

updateBelief(p: Players, b: Beliefs) {
public (p) believes(b) = true
}

updateGoal(p: Players, g: Goals) {
public (p) goal(g) = true
}

updateHearsay(p: Players, h: Hearsay) {
public (p) knows(h) = true
}

setBusy(p: Players, b: Bool) {
busy(p) = b
}

setUpset(p: Players, b: Bool) {
busy(p) = b
}

setShattered(p: Players, b: Bool) {
busy(p) = b
}

setDead(p: Players, b: Bool) {
busy(p) = b
}

setObserver(p: Players, b: Bool) {
busy(p) = b
}

cancelEvent(e: Events, p: Players) {
scheduled(e) = false;
impossible(e) = true
}

cancelMoment(m: Moments, p: Players) {
scheduledm(m) = false;
impossiblem(m) = true
}

scheduleE1(e: Events) {
//event specific preconditions here
scheduled(e)
}

executeE1(e: Events, l: location) { //other inputs based on the involved players
completed(e)
}

Initial:

Execute:
