Types:
Players = Ophelia, p1, p2, p3, p4, unit
Observers = Ophelia, unit
Beliefs = b1, b2, b3, b4
Goals = g1, g2, g3
Hearsay = h1
Events = e1, e2, e3, m1
Bool = true, false
Unit = unit
Loop = first, second, after, reset
Decisions = yes, no
Locations = l1, l2, l3, l4, null

Properties:
at :: Players -> Locations ()
dead :: Players -> Bool ()
believes :: Beliefs -> Bool ()
goal :: Goals -> Bool ()
knows :: Hearsay -> Bool ()
resultsB :: Players -> Hearsay -> Beliefs ()
resultsG :: Players -> Hearsay -> Beliefs ()
busy :: Players -> Bool ()
upset :: Players -> Bool ()
shattered :: Players -> Bool ()
scheduled :: Events -> Bool ()
completed ::  Events -> Bool ()
impossible :: Events -> Bool ()
loop :: Unit -> Loops ()

Actions:
go(p: Players, l: Locations) {
at(p) = l
}

tellHearsay(o: Players, p: Players, h: Hearsay) {
precondition at(o) == at(p);
precondition busy(p) != true;
precondition upset(p) != true;
precondition shattered(p) != true;
precondition dead(p) != true;
public (p) knows(h) = true
}

updateBelief(p: Players, b: Beliefs) {
public (p) believes(b) = true
}

updateGoal(p: Players, g: Goals) {
public (p) goal(g) = true
}

updateBeliefO(p: Players, b: Beliefs, o: Players) {
public (p) believes(b) = true
}

updateGoalO(p: Players, g: Goals, o: Players) {
public (p) goal(g) = true
}

updateHearsay(p: Players, h: Hearsay) {
public (p) knows(h) = true
}

setBusy(p: Players, b: Bool) {
busy(p) = b
}

setUpset(p: Players, b: Bool) {
upset(p) = b
}

setShattered(p: Players, b: Bool) {
shattered(p) = b
}

setDead(p: Players, b: Bool) {
dead(p) = b
}

cancelEvent(e: Events, p: Players) {
scheduled(e) = false;
impossible(e) = true
}

schedulee1(e: Events) {
//event specific preconditions here
scheduled(e) = true
}

schedulee1(e: Events) {
//event specific preconditions here
scheduled(e) = true
}

executee1(e: Events, c1: Players, c2: Players, l: Locations, o: Observers) {
at(c1) = l;
at(c2) = l;
public(o) knows(h1) = true;
completed(e) = true
}

executee2(e: Events, c1: Players, c2: Players, c3: Players, c4: Players, l: Locations, o: Observers) {
public (Players) shattered(c1) = true;
completed(e) = true
}

executee3(e: Events, c1: Players, c2: Players, c3: Players, c4: Players, l: Locations, o: Observers) {
public (Players) dead(c1) = true;
completed(e) = true
}

executem1(e: Events, c1: Players, c2: Players, l: Locations, o: Observers) {
dead(c1) = true;
loop(unit) = reset;
completed(e) = true
}

Initial:
at(Ophelia) = l1()
at(p1) = l1()
at(p2) = l2()
at(p3) = l3()
at(p4) = l4()
looks like (Ophelia, p1, p2, p3, p4): Initial

Execute:
print: model
executee1(e1, p1, p2, l2, Ophelia)
print: model
go(p3, l4)
go(p4, l3)
executem1(m1, Ophelia, p3, l2, unit)
print: model

Done.
